// Generated by CoffeeScript 1.3.3
var Atlas;

(function() {
  var lastTime, vendor, vendors, _i, _len;
  lastTime = 0;
  vendors = ['ms', 'moz', 'webkit', 'o'];
  if (!window.requestAnimationFrame) {
    for (_i = 0, _len = vendors.length; _i < _len; _i++) {
      vendor = vendors[_i];
      window.requestAnimationFrame = window[vendor + 'RequestAnimationFrame'];
      window.cancelAnimationFrame = window[vendor + 'CancelAnimationFrame'] || window[vendor + 'CancelRequestAnimationFrame'];
    }
  }
  if (!window.requestAnimationFrame) {
    window.requestAnimationFrame = function(callback, element) {
      var currentTime, id, timeToCall;
      currentTime = new Date().getTime();
      timeToCall = Math.max(0, 16 - (currentTime - lastTime));
      id = window.setTimeout(function() {
        return callback(currentTime + timeToCall);
      }, timeToCall);
      lastTime = currentTime + timeToCall;
      return id;
    };
  }
  if (!window.cancelAnimationFrame) {
    return window.cancelAnimationFrame = function(id) {
      return clearTimeout(id);
    };
  }
})();

CanvasRenderingContext2D.prototype.pinShape = function(x, y, width, height, fill, stroke) {
  var arc, center;
  if (fill == null) {
    fill = false;
  }
  if (stroke == null) {
    stroke = false;
  }
  center = {
    x: x + width / 2,
    y: y + height / 2
  };
  arc = {
    y: y + height / 3
  };
  this.beginPath();
  this.arc(center.x, y + height / 3, width / 2, Math.PI, 0, false);
  this.bezierCurveTo(x + width, arc.y + height / 4, center.x + width / 3, center.y, center.x, y + height);
  this.moveTo(x, arc.y);
  this.bezierCurveTo(x, arc.y + height / 4, center.x - width / 3, center.y, center.x, y + height);
  if (fill) {
    this.fill();
  }
  if (stroke) {
    return this.stroke();
  }
};

Atlas = (function() {

  function Atlas() {
    this.maps = [];
  }

  Atlas.prototype.createMap = function(options) {
    var map;
    map = new Atlas.Map(options);
    this.maps.push(map);
    return map;
  };

  return Atlas;

})();

Atlas.Map = (function() {

  function Map(options) {
    this.options = options;
    this.container = this.options.container;
    this.markers = [];
    this.map = new google.maps.Map(document.getElementById(this.container), this.options);
  }

  Map.prototype.addMarker = function(options) {
    var marker;
    marker = new Atlas.MapMarker(options);
    this.markers.push(marker);
    return marker;
  };

  Map.prototype.showMarkers = function() {
    var marker, _i, _len, _ref, _results;
    _ref = this.markers;
    _results = [];
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      marker = _ref[_i];
      _results.push(marker.setMap(this.map));
    }
    return _results;
  };

  Map.prototype.fitToMarkers = function(markers) {
    var bounds, marker, _i, _len;
    markers = markers || this.markers;
    bounds = new google.maps.LatLngBounds();
    for (_i = 0, _len = markers.length; _i < _len; _i++) {
      marker = markers[_i];
      bounds.extend(marker.marker.getPosition());
    }
    return this.map.fitBounds(bounds);
  };

  return Map;

})();

Atlas.MapMarker = (function() {

  function MapMarker(options) {
    var markerOptions;
    this.options = options;
    this.latitude = this.options.latitude || 60.0000;
    this.longitude = this.options.longitude || 24.0000;
    this.color = new jColour(this.options.color || '#f00');
    this.size = this.options.size || 24;
    this.width = this.size;
    this.height = this.size * 1.5;
    this.minSize = this.size;
    this.maxSize = this.size * 2;
    this.isGrown = false;
    this.canvas = document.createElement('canvas');
    this.context = this.canvas.getContext('2d');
    markerOptions = {
      position: new google.maps.LatLng(this.latitude, this.longitude),
      title: this.options.title || 'Untitled Marker',
      animation: this.options.animation || null
    };
    this.marker = new google.maps.Marker(markerOptions);
    if (this.options.map != null) {
      this.marker.setMap(this.options.map);
      this.render();
    }
  }

  MapMarker.prototype.setMap = function(map) {
    return this.marker.setMap(map);
  };

  MapMarker.prototype.render = function() {
    this.canvas.width = this.width;
    this.canvas.height = this.height + this.size / 4;
    this.context.clearRect(0, 0, this.canvas.width, this.canvas.height);
    this.icon = this.createIcon();
    return this.marker.setIcon(this.icon);
  };

  MapMarker.prototype.createIcon = function() {
    var baseColor, baseGradient, baseGradientColors, borderColor, borderGradient, borderGradientColors, params, pinShapeParams, _i, _len, _ref;
    this.drawShadow();
    baseColor = new jColour(this.color.rgb());
    baseGradientColors = {
      start: baseColor.lighten(5.5).hex(),
      end: baseColor.darken(10).hex()
    };
    baseGradient = this.context.createLinearGradient(0, 0, this.width, this.height);
    baseGradient.addColorStop(0, baseGradientColors.start);
    baseGradient.addColorStop(1, baseGradientColors.end);
    borderColor = new jColour(this.color.rgb());
    borderGradientColors = {
      start: borderColor.darken(10).transparentize(90).hex(),
      end: borderColor.darken(15).transparentize(90).hex()
    };
    borderGradient = this.context.createLinearGradient(0, 0, this.width, this.height);
    borderGradient.addColorStop(0, borderGradientColors.start);
    borderGradient.addColorStop(1, borderGradientColors.end);
    this.context.lineWidth = 1.5;
    pinShapeParams = [[1.5, 0.0, this.width - 3.5, this.height, baseGradient, borderGradient], [2.0, 1.0, this.width - 4.25, this.height - 2.5, new jColour(this.color.rgb()).lighten(25).hex(), false], [2.0, 2.5, this.width - 4.25, this.height - 4.0, baseGradient, false]];
    for (_i = 0, _len = pinShapeParams.length; _i < _len; _i++) {
      params = pinShapeParams[_i];
      this.context.fillStyle = params[4] ? params[4] : false;
      this.context.strokeStyle = params[5] ? params[5] : false;
      (_ref = this.context).pinShape.apply(_ref, params);
    }
    this.context.beginPath();
    this.context.arc(this.width / 2, this.height / 3, this.width / 6, Math.PI * 2, 0, false);
    this.context.fillStyle = '#fff';
    this.context.fill();
    return new google.maps.MarkerImage(this.canvas.toDataURL(), new google.maps.Size(this.width, this.canvas.height, new google.maps.Point(0, 0, new google.maps.Point(this.width / 2, this.height))));
  };

  MapMarker.prototype.drawShadow = function() {
    var center, gradient, position, size;
    size = {
      width: this.width / 2,
      height: this.width / 2
    };
    position = {
      x: this.width / 2 - size.width / 2,
      y: this.height - size.height
    };
    center = {
      x: position.x + size.width / 2,
      y: position.y + size.height / 2
    };
    gradient = this.context.createRadialGradient(center.x, center.y, 0, center.x, center.y, size.width / 2);
    gradient.addColorStop(0, 'rgba(0, 0, 0, 0.30)');
    gradient.addColorStop(1, 'rgba(0, 0, 0, 0)');
    this.context.setTransform(1, 0, 0, 0.5, 0, 0);
    this.context.translate(0, this.height + size.height / 2);
    this.context.fillStyle = gradient;
    this.context.fillRect(position.x, position.y, size.width, size.height);
    this.context.fill();
    this.context.closePath();
    return this.context.setTransform(1, 0, 0, 1, 0, 0);
  };

  MapMarker.prototype.drawPinShape = function(x, y, width, height, fill, stroke) {
    var arcPosition, center;
    center = {
      x: x + width / 2,
      y: x + height / 2
    };
    arcPosition = {
      y: y + height / 3
    };
    this.context.beginPath();
    this.context.arc(this.center.x, y + height / 3, width / 2, Math.PI, 0, false);
    this.context.bezierCurveTo(x + width, arcPosition.y + height / 4, center.x + width / 3, center.y, center.x, y + height);
    this.context.moveTo(x, arcPosition.bottom);
    this.context.bezierCurveTo(x, arcPosition.y + height / 4, center.x - width / 3, center.y, center.y, y + height);
    if (fill) {
      this.context.fillStyle = fill;
      this.context.fill();
    }
    if (stroke) {
      this.context.strokeStyle = stroke;
      return this.context.stroke();
    }
  };

  MapMarker.prototype.animateSize = function(currentSize, minSize, maxSize) {
    var newSize,
      _this = this;
    this.minSize = minSize;
    this.maxSize = maxSize;
    if (this.isGrown && currentSize <= this.minSize) {
      this.isGrown = false;
      return;
    }
    if (!this.isGrown && size >= this.maxSize) {
      this.isGrown = true;
      return;
    }
    newSize = this.isGrown ? currentSize - 1 : currentSize + 1;
    this.width = newSize;
    this.height = newSize * 1.5;
    return requestAnimationFrame(function() {
      return _this.animateSize(newSize, minSize, maxSize);
    });
  };

  return MapMarker;

})();

window.Atlas = Atlas;
